{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","value","setvalue","city","setcity","useEffect","FetchApi","a","fetch","response","console","log","json","jsonresponse","main","className","action","type","name","id","placeholder","onChange","e","target","onClick","preventDefault","xmlns","width","height","fill","viewBox","d","temp","temp_min","temp_max","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PA2DeA,MAvDf,WAEE,MAAqCC,qBAArC,0BAAOC,OAAP,MAAe,SAAf,EAAyBC,EAAzB,KACA,EAAwBF,mBAAS,MAAjC,mBAAOG,EAAP,KAAaC,EAAb,KAmBA,OAhBAC,qBAAU,WACP,IAAOC,EAAQ,uCAAG,8BAAAC,EAAA,sEACQC,MAAM,qDAAD,OAAsDP,EAAtD,yDADb,cACTQ,EADS,OAEfC,QAAQC,IAAIF,GAFG,SAGUA,EAASG,OAHnB,OAGXC,EAHW,OAIfH,QAAQC,IAAIE,GACZT,EAAQS,EAAaC,MALN,2CAAH,qDAOfR,MAEA,CAACL,IAOF,qBAAKc,UAAU,MAAf,SAEI,sBAAKA,UAAU,UAAf,UAEA,qBAAKA,UAAU,OAAf,SACE,uBAAMC,OAAO,GAAb,UACA,uBAAOC,KAAK,OAAOC,KAAK,GAAGC,GAAG,aAAaC,YAAY,eAAenB,MAAOA,EAAOoB,SAAU,SAAAC,GAAC,OAAIpB,EAASoB,EAAEC,OAAOtB,UACrH,wBAAQc,UAAU,SAASS,QAZlB,SAACF,GAChBA,EAAEG,kBAWI,SAA8C,qBAAKC,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,KAAK,eAAed,UAAU,eAAee,QAAQ,YAApH,SACzC,sBAAMC,EAAE,uMAKb5B,EAAgE,sBAAKY,UAAU,YAAf,UAClE,sBAAKA,UAAU,cAAf,UAA8BZ,EAAK6B,KAAnC,YACA,sBAAKjB,UAAU,SAAf,kBACQZ,EAAK8B,SADb,WAC+B9B,EAAK+B,YAElC,qBAAKnB,UAAU,OAAf,SAAuBd,OALd,mBAAGc,UAAU,kBAAb,mCC5BJoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.348e61b6.chunk.js","sourcesContent":["import \"./App.scss\";\nimport {useState, useEffect} from \"react\"\nimport axios from \"axios\"\n\nfunction App() {\n\n  const [value = \"London\", setvalue] = useState()\n  const [city, setcity] = useState(null)\n  \n\n  useEffect(() => {\n     const  FetchApi = async()=>{\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${value}&units=metric&appid=b1d80fed408ec26ede9762b85ce5b27e`)\n        console.log(response)\n        let jsonresponse = await response.json()\n        console.log(jsonresponse)\n        setcity(jsonresponse.main)\n     }\n     FetchApi()\n  \n  }, [value])\n\n  const sendrequ = (e) => {\n    e.preventDefault();\n  };\n\n  return (\n    <div className=\"App\">\n\n        <div className=\"content\">\n        \n        <div className=\"form\">\n          <form action=\"\">\n          <input type=\"text\" name=\"\" id=\"input_text\" placeholder=\"City name...\" value={value} onChange={e => setvalue(e.target.value)}/>\n          <button className=\"submit\" onClick={sendrequ}><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-search\" viewBox=\"0 0 16 16\">\n               <path d=\"M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z\"/>\n             </svg></button>\n          </form>\n        </div>\n\n        {!city ? ( <p className=\"city_dont_found\">City dont found</p>) : (<div className=\"temp_data\">\n        <div className=\"temperature\">{city.temp} CÂ°</div>\n        <div className=\"minmax\">\n          Min: {city.temp_min} | Max: {city.temp_max}\n        </div>\n          <div className=\"city\">{value}</div>\n        </div>\n        )}\n        \n\n        </div>\n      \n\n      \n        \n    </div>\n  );\n}\n\nexport default App;\n\n/*\n\nAPI KEY = b1d80fed408ec26ede9762b85ce5b27e\n\n`api.openweathermap.org/data/2.5/weather?q=${value}&appid=`\n\n      \n\nLINK = api.openweathermap.org/data/2.5/weather?q={city name}&appid=b1d80fed408ec26ede9762b85ce5b27e\n\napi.openweathermap.org/data/2.5/weather?q=london&appid=b1d80fed408ec26ede9762b85ce5b27e\n\n\n\n*/\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}